<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <meta name="description" content="Internet measurement, internet speed, velocity, speed" />
  <meta name="author" content="GrapeiaTech" />
  <title>Velocirapid - the dino internet measurement</title>
  <meta name="description" content="Velocirapid - the fast and free internet speed measurement offers by dino" />
  <meta name="keywords" lang="en"
    content="speed,test,speedtest,speed test,bandwidth speed test,internet speed test,broadband speed test,speakeasy,flash,cnet,internet,network,connection,broadband,bandwidth,latency,ping,throughput,download,upload,connection,dsl,adsl,cable,t1,isp,voip,ip,ip address,tcp,velocity,fast,speed,test,internet,net" />

  <meta name="twitter:card" value="summary">
  <meta name="twitter:title" content="Velocirapid - Internet Speed Fast Measurement">
  <meta name="twitter:description" content="Velocirapid - the fast and free internet speed measurement offers by dino">
  <meta name="twitter:image" content="https://velocirapid.com/assets/velociraptor.webp">

  <meta property="og:title" content="Velocirapid - Internet Speed Fast Measurement" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://velocirapid.com" />
  <meta property="og:image" content="https://velocirapid.com/assets/velociraptor.webp" />
  <meta property="og:description"
    content="Velocirapid - the fast and free internet speed measurement offers by GrapeTech" />
  <meta property="og:site_name" content="Velocirapid - Internet Speed Fast Measurement" />

  <link rel="icon" type="image/x-icon" href="assets/favicon.ico" />
  <style>
    body {
      font-family: Roboto, sans-serif;
      margin: 0;
      font-size: 4vh;
      font-weight: 400;
      overflow: hidden;
      line-height: 1.5;
      color: #fff;
      background-color: #000;
      background: linear-gradient(to bottom, rgba(0, 0, 0, .3) 0, rgba(0, 0, 0, .7) 75%, #000 100%), url(/assets/bg.webp);
      background-position: center;
      background-repeat: no-repeat;
      background-attachment: fixed;
      background-size: cover;
      -webkit-background-size: cover;
      -moz-background-size: cover;
      -o-background-size: cover
    }

    header {
      position: absolute;
      top: 40%;
      width: 100%;
      transform: translate(0, -50%);
      padding: 10px;
      text-align: center
    }

    h1 {
      background: -webkit-linear-gradient(#fff, rgba(238, 238, 238, .3));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text
    }

    footer {
      position: absolute;
      bottom: 1%;
      color: rgba(255, 255, 255, .5);
      font-size: .8rem;
      width: 100%;
      line-height: 20px;
      text-align: center
    }

    .velociraptor {
      position: absolute;
      bottom: 2px;
      text-align: left;
      margin-left: 4px
    }

    img {
      width: auto;
      height: 30vh
    }
  </style>
</head>

<body>
  <header>
    <h1 id="download">Velocirapid</h1>
    <h1 id="upload">&nbsp;</h1>
  </header>
  <div class="velociraptor"><img width="640" height="360" alt="The dino speed" src="assets/velociraptor.webp"></div>
  <footer>Copyright Â© GrapeTech</footer>
  <script>
    const fileAddr = [{
      size: 5716782,
      url: 'https://storage.googleapis.com/gweb-uniblog-publish-prod/original_images/DAP_story_first.gif',
    }];
    const downStreams = 10;
    const downTimeUpMax = 10;

    const ulTotal = 20; //5 megas
    const ulStreams = 3;
    const ulTimeUpMax = 8;

    const overheadCompensationFactor = 1.03;
    const bits = 8;
    const megaByte = 1048576; //1MB

    var ping;

    function getNow() { return (new Date()).getTime() };

    function ShowProgressMessage(type, msg) {
      if (console) {
        if (typeof msg == "string") {
          console.log(msg);
        } else {
          for (var i = 0; i < msg.length; i++) {
            console.log(msg[i]);
          }
        }
      }

      var oProgress = document.getElementById(type);
      if (oProgress) {
        var actualHTML = (typeof msg == "string") ? msg : msg.join("<br />");
        oProgress.innerHTML = actualHTML;
      }
    }

    function checkFiles() {

      let pingTest = (file) => {
        return new Promise((resolve, reject) => {
          let image = new Image();
          image.addEventListener('error', (err, msg) => {
            reject('error');
          });
          image.addEventListener('load', (err, msg) => {
            resolve(file);
          });
          image.src = file.url + "?nnn=" + getNow();
        });
      }

      var promises = [];
      fileAddr.forEach(file => {
        let prom = pingTest(file);
        promises.push(prom);
      });

      Promise.race(promises).then(file => {
        //console.log(file);
        downTest(file);
        //alert("start");
        //ulTest();
      }).catch(err => {
        console.log(err)
      })
    }

    function getPing() {
      return new Promise((resolve, reject) => {
        let pingf = new XMLHttpRequest();
        let pingcalc = () => {
          if (pingf.readyState == 4) {
            ping = getNow() - ping;
            resolve(ping)
          }
          console.log("Ping::", `${ping}ms`);
        }
        pingf.onload = pingcalc;
        pingf.onerror = pingcalc;
        ping = getNow();
        pingf.open("GET", window.location.pathname + "?r=" + ping, true);
        pingf.send();
      })
    }

    function speedText(speed) {
      const units = ['', 'K', 'M', 'G', 'T'];
      const places = [0, 1, 2, 3, 3];
      let unit = 0;
      while (speed >= 2000 && unit < 4) {
        unit++;
        speed /= 1000;
      }
      return `${speed.toFixed(places[unit])} ${units[unit]}bps`;
    }

    var downCalled = false;
    function downTest(file) {
      if (downCalled) return;
      downCalled = true;

      var startDownload, lastTimeDownload, downloadTotal = 0, stopDownTest, count = 0;
      var images = [];

      const url = file.url;
      const contentLenght = file.size;

      const downTest = (i, delay = 0) => {
        setTimeout(() => {
          images[i] = new Image();
          images[i].addEventListener('load', (err, msg) => {
            count++;
            lastTimeDownload = getNow();
            if (!stopDownTest)
              downTest(i, 0)
          });
          images[i].src = `${url}?nocache=${Math.random()}`;
        }, 1 + i * delay);
      }

      startDownload = getNow();
      for (var i = 0; i < downStreams; i++) {
        downTest(i, 200);
      }

      var interval = setInterval(() => {
        let duration = (lastTimeDownload - startDownload) / 1000;
        let bitsLoaded = (contentLenght * count * bits * overheadCompensationFactor);
        let speedT = (bitsLoaded / duration);
        if (!isNaN(speedT))
          ShowProgressMessage("download", "&darr; " + speedText(speedT));
        if (duration > downTimeUpMax) {
          stopDownTest = true;
          clearRequests(images);
          clearInterval(interval);
          downCalled = false;
          ulTest();
        }
      }, 200)

    }

    var ulCalled = false;
    function ulTest() {
      if (ulCalled) return;
      ulCalled = true;

      ShowProgressMessage("upload", "Getting dino upload...");

      var startUpload, totalUploaded = 0;

      var r = new ArrayBuffer(megaByte);
      var maxInt = Math.pow(2, 32) - 1;
      try {
        r = new Uint32Array(r);
        for (var i = 0; i < r.length; i++) r[i] = Math.random() * maxInt;
      } catch (e) { }
      var req = [];
      var reqsmall = [];
      for (var i = 0; i < ulTotal; i++) req.push(r);
      const blob = new Blob(req);

      var xhr = [];

      var upTest = (i, delay = 0) => {
        setTimeout(() => {
          var prevLoaded = 0
          let a = new XMLHttpRequest();
          xhr[i] = a;
          xhr[i].upload.onprogress = function (event) {
            var loadDiff = event.loaded <= 0 ? 0 : event.loaded - prevLoaded;
            if (isNaN(loadDiff) || !isFinite(loadDiff) || loadDiff < 0) return;
            totalUploaded += loadDiff;
            prevLoaded = event.loaded;
          };
          xhr[i].upload.onload = function () {
            upTest(i, 0);
          };
          xhr[i].upload.onerror = function () {
            try {
              xhr[i].abort();
            } catch (e) { }
            delete xhr[i];
            testStream(i, 0);
          };
          xhr[i].open("POST", "upload?nocache=" + Math.random(), true);
          xhr[i].send(blob);
        }, 1 + i * delay);
      }

      var startUpload = getNow();
      for (var i = 0; i < 3; i++) {
        upTest(i, 200);
      }

      var interval = setInterval(() => {
        let duration = (getNow() - startUpload) / 1000;
        let bitsLoaded = (totalUploaded * bits * overheadCompensationFactor);
        let speedT = speedText(bitsLoaded / duration);
        ShowProgressMessage("upload", "&uarr; " + speedT);
        if (duration > ulTimeUpMax) {
          clearRequests(xhr);
          clearInterval(interval);
          ulCalled = false;
        }
      }, 200)
    }

    function clearRequests(xhr) {
      if (xhr) {
        for (var i = 0; i < xhr.length; i++) {
          try {
            xhr[i].onprogress = null;
            xhr[i].onload = null;
            xhr[i].onerror = null;
          } catch (e) { }
          try {
            xhr[i].upload.onprogress = null;
            xhr[i].upload.onload = null;
            xhr[i].upload.onerror = null;
          } catch (e) { }
          try {
            xhr[i].abort();
          } catch (e) { }
          try {
            delete xhr[i];
          } catch (e) { }
        }
        xhr = null;
      }
    }

    function InitiateSpeedDetection() {
      ShowProgressMessage("download", "Getting dino speed...");
      getPing();
      window.setTimeout(checkFiles, 2000);
    };

    if (window.addEventListener) {
      window.addEventListener('load', InitiateSpeedDetection, false);
    } else if (window.attachEvent) {
      window.attachEvent('onload', InitiateSpeedDetection);
    }

  </script>
</body>

</html>